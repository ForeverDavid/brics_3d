Status
------

* 6DSLAM registration works (GUI stuff 6Dslam library not yet supported)
* alpha shape reconstruction works
* IVT ICP works, but only returns translation and rotation (not point transformation possible yet)
* depth image to point cloud transformation  works as draft version (uncalibrated camera!!!)
* not yet fully tested/compiled for Microsoft Windows 


TODO List
---------

* port for windows (all used libraries uand external libraries state they support windos, but not yet tested)
* online capturing with zcam
* ccpUnit tests?!?
* automated install script (for linux)?
* add IVT to external libraries?
* how to store alpha-shaped models? (geonview? <- might not work with windows)
* BIG TODO: refactor towards component model...


Change Log
----------

* cleaned up cmake files (from in-source to out of-source-build) 


Prerequisites
-------------

1.) OpenCV 1.0 (or higher)
2.) boost 1.37 (or higher)
3.) CGAL 3.4 (or higher)
4.) cmake version 2.6 or higher
5.) external libraries in "external_libs" folder (see install instructions/prerequisites there)


Compilation
-----------

1.) Linux

./install.sh

OR:

Compile all depending libraries in "external" by hand. Then invoke in root folder:
mkdir build
cd build 
cmake ..
make

2.) Windows



Known Problems
--------------

1.) BRICS_3D is only displayed in lower case letters (brics_3d) in a Linux system:
This might occur on a FAT32 partition which is case insensitive for names shorter than
8.3 characters. The default behavior on some Linux systems is to map theses names
to lower case. To overcome this problem add "shortname=mixed" to the options section
of the FAT32 partition in the "fstab" configuration file. Remount that partition afterwards.


Folder structure
----------------

"src" contains the main source code
"examples" contains the test applications and serves as a development sand box
"lib" contains the compiled libraries
"bin" contains all compiled binaries (which are linked against the libraries)

"doc" contains the html files generated by doxgen (just invoke doxygen brics_3dpm.doxyfile)
"externals" contains the (modified) external libraries and some cmake scripts (to check prerequisites)
"build" for out-of-source build with cmake


How to build your own application
---------------------------------

1.) Create new .cpp with main method in examples folder
2.) Edit CMakeLists.txt in examples folder e.i. add (at least) the following lines (of course without < and > ):
ADD_EXECUTABLE(<your_application> <your_application.cpp>) # compile application
TARGET_LINK_LIBRARIES(<your_application> brics_3dpm_core brics_3dpm_algorithm brics_3dpm_util) # link application to BRICS libraries


Integration into Eclipse (with CDT)
-----------------------------------

1.) Build in Eclipse GUI (follow instructions in "Compilation" section first)
Open the project's properties -> "C/C++ Build" and _disable_:
* Use default builder command
* Generate makefiles automatically  

Fill "Build command" field with:
make -C ${workspace_loc:}/BRICS_3D/build


2.) Run in Eclipse GUI
Open the "Run Configurations" window and manually add in the "C/C++ Application" field:
bin/<your_application>

Optionally the check box "Connect process input _output to a terminal." can be enabled (recommended).


3.) Debug in Eclipse GUI
Follow the previous step and make sure the following line exists in the main CMakeLists.txt (located in root folder):
SET(CMAKE_BUILD_TYPE DEBUG)


4.) Additional Plug-ins
The following Eclipse plug-ins might be of interest for you:
* ECLOX - for doxygen documentation generation (http://download.gna.org/eclox/update/)
* cmake editor - to have a nicer visual appearance of CMake files (but still requires manual editing)(http://cmakeed.sourceforge.net/updates)


Impressum
---------

Written by Sebastian Blumenthal (blumenthal@gps-stuttgart.de)
Last update: 24.09.2009

