/*!

@page worldmodel Introduction to the world model concept

Robots need some internal representation of their
surroundings to be able to reason about and to interact
with it. As real world scenes are dynamic it is not sufficient
to load a static environment model from a file. 
Sensor data needs to be processed and continuously incorporated 
into the applications world model. This scene data
is relevant for a variety of \e users like path planners, a task
coordinator, motion control modules or perception functionality. 
Modern robot systems often make use of component-based 
frameworks like ROS or OROCOS for instance to realize this kind of functionalities.
Each component encapsulates a particular kind of functionality and
solely communicates though a set of interfaces. 

Components for planning, coordination, control, and perception
 tend to have their individual internal world representation with custom data types,
interfaces or mechanisms to retrieve the latest data. As a consequence parts of the
world model are scattered over a variety of components and
might remain unconnected or potentially hidden in the code.
Furthermore each component might produce intermediate
processing results that might be interesting
for other components as well. But this kind of data would have to be replicated
in the other components if there is no dedicated mechanism
for sharing the data. A better approach would be to have a common and shared
world model while each component has access to its relevant
parts of a scene as indicated by following figure. In the remainder of this section the shared
world model approach that is used in BRICS_3D is presented.

 @image html brics_3d_rsg_world_model_overview.svg
 @image latex brics_3d_rsg_world_model_overview.pdf "Overview of a shared world model." width=10cm 

@section worldmodel_intro Basic concept

The world model concept in BRICS_3D is centered around the idea of a \e scene \e graph. 
Scene graphs are frequently deployed within the field of the 3D computer vision and 3D gaming. 
However to make the scene graph successful in the robotic domain we need to make some adjustments as explained later.
To seperate the approach from traditional scene graphs it will be labeled with \e Robot \e Scene \e Graph (RSG). 
This is reflected in the namespace brics_3d::rsg for the related classes.
 
The core idea is to represent a 3D scene as a directed acyclic graph (DAG) of 
geometrical and hierarchal entities. The edges of the graph represent relations 
between nodes. Traveling along a path of edges from the root node to a leave 
will produce a hierarchical order of the nodes. Depending on the node type a 
certain relation is expressed. For example the Transform nodes along such a path will
define rigid transformations that will have to be applied to the leave node. 
An example scene graph is illustrated in the following diagram:

@dot 
digraph {
1 [label = "Group:\n root"];
2 [label = "Transform\n"style="filled" fillcolor=yellow];
3 [label = "Transform\n"style="filled" fillcolor=yellow];
4 [label = "Group:\n table"];
5 [label = "Group:\n robot"];
6 [label = "GeometricNode:\n table mesh" style="filled" fillcolor=green];
7 [label = "Transform\n"style="filled" fillcolor=yellow];
8 [label = "Group:\n cup"];
9 [label = "GeometricNode:\n cylinder" style="filled" fillcolor=green];
10 [label = "GeometricNode:\n handle mesh" style="filled" fillcolor=green];
11 [label = "Transform\n"style="filled" fillcolor=yellow];
#12 [label = "Group:\n sensor"];
#13 [label = "Transform\n"style="filled" fillcolor=yellow];

1 -> 2;
1 -> 3;
2 -> 4;
3 -> 5;
4 -> 6;
4 -> 7;
7 -> 8;
8 -> 9;
8 -> 10;
5 -> 11;
#11 -> 12;
#12 -> 13;
#13 -> 9;
11 -> 9;
}
@enddot


A node is defined as:
- A leaf in the graph. It can have multiple parent nodes. The \e root \e node is a node that has no parents.
- Each node has a unique ID. The current implementation uses unsigned integers to represent the IDs. These IDs
  are also a mean to abstract from pointers and allows identification of nodes beyond the system boundaries of a computer.  
- Each node has attached attributes. These attributes are stored as a list of key value pairs. 
  This mechanism allows to tag graph entities with e.g. semantic attributes or debug information. 
  However the exact usage and meaning depends on the actually application and requires some kind of convention. 
  The scene graph offers the flexibility and infrastructure to be able to realize such tagging but it does not interpret any semantics.

@dot 
digraph {
n [label = "Node"];
p1 [label = "parent 1"];
p2 [label = "parent 2"];
p3 [label = "parent ..." style=dotted];
p4 [label = "parent n"];

p1->n;
p2->n;
p3->n[style=dotted];
p4->n;

}
@enddot

There are two different types of nodes: \e leaves and \e inner \e nodes. 
Leaves contain the actual 3D data like point clouds or triangle meshes. 
While running robotic 3D perception applications there will be some intermediate data the 
will be created and further processed by (cf. @ref introduction) the algorithms. 
The raw data, the intermediate processing data as well as the "final" resulting data will be stored in leaves within the scene graph.
This is in contrast to the 3D computer vision and 3D gaming approach where they typically only load pre-modelled 3D data.    

The implementation of BRICS_3D contains a \e brics_3d::rsg::GeometricNode to store 3D data in leaves. The geometric node is a rather general container for any
kind of 3D data subsumed by the brics_3d::rsg::Shape class. Possible data ranges from rather primitive shapes like a box or a cylinder to unconstrained
geometries like point clouds or meshes. 3D features like spin images for instance are placed in to a geometric node too.

@dot 
digraph {
n [label = "GeometricNode" style="filled" fillcolor=green];
p1 [label = "parent 1"];
p2 [label = "parent ..." style=dotted];

p1->n;
p2->n[style=dotted];

}
@enddot

There is a set of inner nodes that can be used to create the certain scene structure. 
- \e brics_3d::rsg::Group: The group is a node that allows for the actual graph relations, as it extends a node to have further child nodes.
  The group nodes are responsible for memory management. A node "owns" its children - thus it will trigger deletion of its child references when it
  is deleted. A node will be automatically deleted when it does not have parents any more (except for the root node).

@dot 
digraph {
n [label = "Group"];
p1 [label = "parent 1"];
p2 [label = "parent 2"];
p3 [label = "parent ..." style=dotted];
p4 [label = "parent n"];

c1 [label = "child 1"];
c2 [label = "child 2"];
c3 [label = "child ..." style=dotted];
c4 [label = "child m"];

p1->n;
p2->n;
p3->n[style=dotted];
p4->n;

n->c1;
n->c2;
n->c3[style=dotted];
n->c4;

}
@enddot

- \e brics_3d::rsg::Transform: A transform node is a special group node that expresses a geometric transform between its parents and children. 
 Every transform node along a path will apply a transform i.e. a translational and rotational transform relative to its parents. 
 Thus while traversing a scene graph transform nodes along a path means to apply multiple transforms in a chained-up fashion. 
 In robotic scenarios these transforms tend to change over time. 
 For example the robot is moving in a world frame, dynamic objects are moving in the environment or the links of the a manipulator move while grasping 
 an object of interest. To be able to determine the current velocity of dynamic objects or even make predictions where they will be in near future 
 we need to store (a limited) history of the transforms. 
 Each transform node in the scene graph stores the data in a cache with associated time stamps. 
 Data that exceeds a certain duration will be deleted. This forms a short-term temporal cache.
 
@dot 
digraph {

r [[label = "Group:\n root"]];
t1 [label = "Transform T1" style="filled" fillcolor=yellow];
t2 [label = "Transform T2" style="filled" fillcolor=yellow];
n [label = "Node with pose = T1*T2 relative to root"]

r->t1
t1->t2
t2->n

}
@enddot

Detailed information on the implementation can be found in the @ref sceneGraph section. 
    	
@section worldmodel_api The world model API

The world model implementation offers two APIs that reside on different conceptual levels.
-# API for the scene graph primitives. This API grands access to all scene graph elements.
-# Hight level API for working with \e scene \e objects. This API intents to hide the complexity
for users that want quick/convenient access to task relevant objects like a cup to be grasped. 

All interfaces are available via the brics_3d::WorldModel class. Typically a handle will be instantiated
like in the following code snippet:

@code
	brics_3d::WorldModel* wm = new brics_3d::WorldModel();
@endcode

@subsection worldmodel_rsg_api API for the scene graph primitives

All necessary operations to update or query the data of the scene graph are gathered in the class brics_3d::rsg::SceneGraphFacade. 
Such a handle is part of the brics_3d::WorldModel as well via the public member variable \e scene.
- The interface brics_3d::rsg::ISceneGraphUpdate is dedicated to all update operations i.e. to add new nodes, delete notes or 
add/update transforms or 3D data. 
- The query interface brics_3d::rsg::ISceneGraphQuery allows to get 3D data, transforms or to locate
nodes with certain attached attribute tags.

The code for working with the API - in this case for adding a Node relative to the root - will be similar 
to the excerpt below: 

@code
	unsigned int groupId = 0;                        // World model assigns (uniqe) IDs. Thus the value will be returned later. 
	vector<brics_3d::rsg::Attribute> tmpAttributes;  // Optional attributes to be assigned.
	tmpAttributes.push_back(brics_3d::rsg::Attribute("name","some_group"));
	
	/* add a group node relative to root */
	wm->scene.addGroup(wm->scene.getRootId(), groupId, tmpAttributes);	
@endcode

@subsection worldmodel_secene_objects_api High level world model API

On top of the @ref worldmodel_rsg_api the high level API allow access of \e scene \e objects. 
A scene object can be seen as an aggregation of some parts in the scene graph. A result of a query will
comprise the following elements:
- ID: A unique ID.
- Parent ID: ID of the parent node.
- Transform: Transform of scene object relative to root. 
- Shape: One shape representing the geometry. 
- Attributes: A set of tags belonging to the object.

Scene objects are represented in the scene graph as nodes that follow a certain convention. 
Essentially a query will search for brics_3d::rsg::Transform nodes that are tagged with the attribute
(taskType = sceneObject). It is assumed to have at least one brics_3d::rsg::GeometricNode as a child that can be 
returned as a shape. In case of multiple GeometricNodes the first child will be taken. In the following
example the nodes with IDs 911 and 898 form a scene object as they comply to this convention:  

@dot
digraph {
1 [label = "Group:\nID [1]\n(name = root)\n"];
7 [label = "Group:\nID [7]\n(name = sceneObjects)\n"];
911 [label = "Transform:\nID [911]\nUpdates: 5\n(name = cluster_tf)\n(taskType = sceneObject)\n"style="filled" fillcolor=yellow];
898 [label = "GeometricNode:\nID [898]\n(name = cluster_bbox)\n(shapeType = Box)\n" style="filled" fillcolor=green];

1 -> 7;
7 -> 911;
911 -> 898;

}
@enddot

The code for requesting all available scene objects in a scene graph involves the following lines:

@code
	vector<brics_3d::rsg::Attribute> queryArributes;    // We leave the attributes empty here to seach for all available scene objects.
	vector<brics_3d::SceneObject> resultObjects;

	/* query for scene objects */
	wm->getSceneObjects(queryArributes, resultObjects);
@endcode

@section worldmodel_tools Tools for debugging

The robot scene graph offers tools to visualize and inspect a graph at run time. The implementation
makes use of the \e observer \e software \e pattern. This allows to observe all updates that are
performed via the API. The following observers are available:

- brics_3d::rsg::OSGVisualizer: Shows the 3D geometry of the scene graph based on the OpenSceneGraph (OSG) library.
Note that OSG is an optional dependency that has to be enabled first (cf. @ref install_optional_birearies). To attach
the OSG based visualizer use the code below:
@code
	brics_3d::rsg::OSGVisualizer* wmObserver = new brics_3d::rsg::OSGVisualizer();
	wm->scene.attachUpdateObserver(wmObserver); // Enable 3D visualization.
@endcode
- brics_3d::rsg::DotVisualizer: Shows the structure of the graph. It traverses a scene graph on every update and saves it 
as dot files and svg images. 
@code
	brics_3d::rsg::DotVisualizer* dbgObserver = new brics_3d::rsg::DotVisualizer(&wm->scene);
	dbgObserver->setKeepHistory(true);           // If set to true _all_ graph snapshots will be saved as a file.
	wm->scene.attachUpdateObserver(dbgObserver); // Enable graph structure visualization.
@endcode

@section worldmodel_links Further world model resources

- ROS integration of API: https://github.com/blumenthal/brics_3d_experimental/tree/master/brics_3d_ros



*/