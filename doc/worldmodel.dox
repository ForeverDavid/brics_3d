/*!

@page worldmodel Introduction to the world model concept

@section worldmodel_intro Basic concept

The world model concept in BRICS_3D is centered around the idea of a \e scenegraph. 
Scenegraphs are frequently deployed within the field of the 3D computer vision and 3D gaming. 
However to make the scenegraph successful in the robotic domain we need to make some adjustments as explained later.

The core idea is to represent a 3D scene as a directed acyclic graph (DAG) of geometrical and hierarchal entities. 
The edges of the graph represent relations between nodes in the sense of "belongs to". 
Traveling along a path of edges will produce a hierarchical order of the nodes.

A node is defined as:
- A leaf in the graph. It can have multiple parent nodes. The \e root \e node is a node that has no parents.
- Each node has a unique ID. The current implementation uses unsigned integers to represent the IDs. These IDs
  are also a mean to abstract from pointers and allows identification of nodes beyond the system boundaries of a computer.  
- Each node has attached attributes. These attributes are stored as a list of key value pairs. 
  This mechanism allows to tag graph entities with e.g. semantic attributes or debug information. 
  However the exact usage and meaning depends on the actually application and requires some kind of convention. 
  The scenegraph offers the flexibility and infrastructure to be able to realize such tagging but it does not interpret any semantics.

@dot 
digraph {
n [label = "node"];
p1 [label = "parent 1"];
p2 [label = "parent 2"];
p3 [label = "parent ..." style=dotted];
p4 [label = "parent n"];

p1->n;
p2->n;
p3->n[style=dotted];
p4->n;

}
@enddot

There are two different types of nodes: \e leaves and \e inner \e nodes. 
Leaves contain the actual 3D data like point clouds or triangle meshes. 
While running robotic 3D perception applications there will be some intermediate data the 
will be created and further processed by (cf. @ref introduction) the algorithms. 
The raw data, the intermediate processing data as well as the "final" resulting data will be stored in leaves within the scene graph.
This is in contrast to the 3D computer vision and 3D gaming approach where they typically only load pre-modelled 3D data.    

The implementation of BRICS_3D contains a \e BRICS_3D::RSG::GeometricNode to store 3D data in leaves. The geometric node is a rather general container for any
kind of 3D data subsumed by a \e Shape class. Possible data ranges from rather primitive shapes like a box or a cylinder to unconstrained
geometries like point clouds or meshes. 3D features like spin images for instance are placed in to a geometric node too.

There is a set of inner nodes that can be used to create the certain scene structure. 
- \e BRICS_3D::RSG::Group: The group is a node that allows for the actual graph relations, as it extends a node to have further child nodes.
  The group nodes are responsible for memory management. A node "owns" its children - thus it will trigger deletion of its child references when it
  is deleted. A node will be automatically deleted when it does not have parents any more (except for the root node).

@dot 
digraph {
n [label = "group"];
p1 [label = "parent 1"];
p2 [label = "parent 2"];
p3 [label = "parent ..." style=dotted];
p4 [label = "parent n"];

c1 [label = "child 1"];
c2 [label = "child 2"];
c3 [label = "child ..." style=dotted];
c4 [label = "child m"];

p1->n;
p2->n;
p3->n[style=dotted];
p4->n;

n->c1;
n->c2;
n->c3[style=dotted];
n->c4;

}
@enddot

- \e BRICS_3D::RSG::Transform: A transform node is a special group node that expresses a geometric transform between its parents and children. 
 Every transform node along a path will apply a transform i.e. a translational and rotational transform relative to its parents. 
 Thus while traversing a scene graph transform nodes along a path means to apply multiple transforms in a chained-up fashion. 
 In robotic scenarios these transforms tend to change over time. 
 For example the robot is moving in a world frame, dynamic objects are moving in the environment or the links of the a manipulator move while grasping 
 an object of interest. To be able to determine the current velocity of dynamic objects or even make predictions where they will be in near future 
 we need to store (a limited) history of the transforms. 
 Each transform node in the scenegraph stores the data in a cache with associated time stamps. 
 Data that exceeds a certain duration will be deleted. This forms a short-term temporal cache.
 
@dot 
digraph {

r [label = "root"];
t1 [label = "transform T1"];
t2 [label = "transform T2"];
n [label = "node with pose = T1*T2 relative to root"]

r->t1
t1->t2
t2->n

}
@enddot

Further information on the implemention can be found in the @ref sceneGraph section. 
    	
@section worldmodel_api The world model API

All necessary operations to update or query the data of the scenegraph are gathered in the class BRICS_3D::RSG::SceneGraphFacade. 
- In particular the interface BRICS_3D::RSG::ISceneGraphUpdate is dedicated to all update uperations i.e. to add new nodes, delete notes or 
add/update transforms or 3D data. 
- The query interface BRICS_3D::RSG::ISceneGraphQuery allows to get 3D data, transforms or to locate
nodes with certein attaced attibute tags.





*/