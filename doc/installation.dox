/*!

@page installation Installation

- @ref latest_version
- @ref external_libraries
- @ref install_preperation
- @ref install_external_libraries
- @ref install_optional_birearies
- @ref brics_3d_compilation
- @ref brics_3d_ros_compilation
- @ref doxygen_generation


@section latest_version The Latest Version

\b Update(2014-01-20): The source code has moved to github.

The \b latest version can be found on the brics github page under: 

https://github.com/brics/brics_3d

To get the code invoke:
@code
	git clone https://github.com/brics/brics_3d.git
@endcode


The \b old svn repository is still active and contains the library until version
@ref version_0_5. However the git repository on github contains all older versions as well. 
To get the code from the svn repository invoke:

@code
	svn co https://svn.best-of-robotics.org/brics/BROCRE/BRICS_3D/trunk brics_3d
@endcode

In case you are asked for a SVN login take \e svnuser as username and \e svnuser as password to retrieve the latest read-only copy.



@section external_libraries External libraries 

Required libraries:	
   - Boost 1.37 (or higher)  
   - Eigen2 2.0.13 (or higher, Eigen3 is recommended)
   
Optional libraries
   - OpenSceneGraph (highly recommended)
   - OpenCV 2.0 (or higher) 
   - CPPUNIT
   - XERCES
   - HDF5 1.8.12 or higher recommended

@section install_preperation Preparation for installation


To setup compiler and tools, etc in particular 

Install build-essential and cmake package.

@code
 $ sudo apt-get install build-essential cmake subversion
@endcode

@section install_external_libraries Installing required libraries:

Boost: 
@code
 $ sudo apt-get install libboost-dev libboost-thread-dev
@endcode

Eigen3/2: 

 @code
 $ sudo apt-get install libeigen3-dev
 @endcode

 or use 
 
 @code
 $ sudo apt-get install libeigen2-dev
 @endcode
 
 or
 
 - Download Eigen 2.0.13:  http://bitbucket.org/eigen/eigen2/get/2.0.13.tar.gz 
 - Compile and install with standard cmake procedure

@code 
 $ mkdir build
 $ cd build
 $ cmake ..
 $ make   
 $ sudo make install 
@endcode
 

@section install_optional_birearies Installing optional libraries:

OpenSceneGraph (OSG):

@code
 $ sudo apt-get install libopenscenegraph-dev
@endcode

 NOTE: enable the USE_OSG cmake variable during invocation of cmake for BRICS_3D 

OpenCV:
@code
 $ sudo apt-get install libopencv2.3-dev
@endcode

 NOTE: enable the USE_OPENCV cmake variable during invocation of cmake for BRICS_3D 

CppUnit:

@code
 $ sudo apt-get install libcppunit-dev
@endcode
 
  NOTE: enable the USE_CPPUNIT cmake variable during invocation of cmake for BRICS_3D 


XERCES:

@code
 $ sudo apt-get install libxerces-c-dev
@endcode

 NOTE: enable the USE_XERCES cmake variable during invocation of cmake for BRICS_3D 

MICROBLX:

- Install dependencies clang an luajit:

 @code 
		sudo apt-get install clang

		wget luajit.org/download/LuaJIT-2.0.2.tar.gz
		tar -xvf LuaJIT-2.0.2.tar.gz 
		cd LuaJIT-2.0.2
		make
		sudo make install
		sudo ln -s /usr/local/bin/luajit /usr/local/bin/lua
		sudo ldconfig
 @endcode

- Install latest version of the microblx library:
 
 @code 
		https://github.com/UbxTeam/microblx.git
		cd microblx
		source env.sh 
		make

		echo "export UBX_ROOT=$PWD" >> ~/.bashrc
 @endcode

 NOTE: enable the USE_MICROBLX cmake variable during invocation of cmake for BRICS_3D and makke sure
 that the MICROBLX_DIR environment varialbe is set up properly.  

HDF5: 

@code 
		wget www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8.13/src/hdf5-1.8.13.tar.gz
		tar -xvf hdf5-1.8.13.tar.gz
		cd hdf5-1.8.13/
		mkdir build
		cd build
		cmake -DHDF5_BUILD_CPP_LIB=true -DHDF5_BUILD_HL_LIB=true -DBUILD_SHARED_LIBS=true ..
		make
		sudo make install
@endcode

@section brics_3d_compilation Compilation of BRICS_3D

@code
 $ mkdir build
 $ cd build 
 $ cmake ..
 $ make
 $ sudo make install
@endcode

Note: Enable the USE_OSG cmake variable to compile all the applications with OSG
visualization (e.g. BRICS_3D_Demo) In that case configure it with

@code
 $ cmake .. -DUSE_OSG
@endcode 


@section brics_3d_ros_compilation Alternative compilation of BRICS_3D with the ROS build system

As an alternative to the above described method you can  also use the ROS build system. 
However this method will not include any \e optional libraries. 

First make sure the folder of BRICS_3D is located somewhere in the ROS_PACKAGE_PATH. 
You can check this i.e. if \e roscd \e brics_3d goes to the correct folder. 

@code
 $ rosmake brics_3d --rosdep-install
@endcode 

If you want to install BRICS_3D as a system wide library you can type:

@code
 $ roscd brics_3d/build
 $ sudo make install
@endcode

@section doxygen_generation Generating the latest documentation with Doxygen

To generate the latest version of the accompanied documentation go the BRICS_3D folder and
use the doxygen tool. Then open the html files with your favorite web browser. If not alredy done you need to install doxygen:

@code
 $ sudo apt-get install doxygen
@endcode 

To generate the documentation invoke:

@code
 $ doxygen BRICS_3D.doxyfile
 $ firefox ./doc/html/index.html
@endcode



After sucesfully installing the BRICS_3D library you can continue with @ref quickstart.

*/