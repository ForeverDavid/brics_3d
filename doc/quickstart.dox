/*!

@page quickstart Getting started

This page is a brief guide to get the first program running with the BRICS_3D library.

@section quickstart_installation How to install

As an overview you will need to satisfy (at least) the required dependencies:

   -# Boost 1.37 (or higher)
   -# Eigen2 2.0.13 (or higher, Eigen3 is recommended)
   -# OpenCV 2.0 (or higher) 

Then compile with:

@code
 $ mkdir build
 $ cd build 
 $ cmake ..
 $ make
 $ sudo make install
@endcode

Please see the @ref installation page for detailed instructions.



@section fist_program A first program

Create a file with name hallo_world.cpp and add the following lines:

@code
#include <core/PointCloud3D.h>
#include <iostream>

int main(int argc, char **argv) {
	BRICS_3D::PointCloud3D* myPointCloud = new BRICS_3D::PointCloud3D();

	myPointCloud->addPoint(BRICS_3D::Point3D(0,0,0));
	myPointCloud->addPoint(BRICS_3D::Point3D(1,0,0));
	myPointCloud->addPoint(BRICS_3D::Point3D(0,1,0));
	myPointCloud->addPoint(BRICS_3D::Point3D(0,0,1));

	std::cout << *myPointCloud;

	delete myPointCloud;
}
@endcode



@section fist_program_compilation Compiling and running the first program

Create a CMakeLists.txt file that contains the following lines:

@verbatim
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(BRICS_3D_hallo_world)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/external/cmake_modules")
FIND_PACKAGE(BRICS_3D REQUIRED)

# add include directories (-I)
INCLUDE_DIRECTORIES(${BRICS_3D_INCLUDE_DIRS})

# add library directories (-L)
LINK_DIRECTORIES(${BRICS_3D_LINK_DIRECTORIES})

# compile and link the executables 
ADD_EXECUTABLE(hallo_world hallo_world.cpp)
TARGET_LINK_LIBRARIES(hallo_world ${BRICS_3D_LIBRARIES})
@endverbatim

Create a subfolder external/cmake_modules and copy over the FindBRICS_3D.cmake file from the BRICS_3D sources. 
It is located in external/cmake_moduled subfolder too.

@code
 $ mkdir build
 $ cd build 
 $ cmake ..
 $ make
@endcode

the you can run the executable via typing:

@code
 $ ./hello_world
@endcode

You should retrieve an output like this:

@verbatim
0 0 0
1 0 0
0 1 0
0 0 1
@endverbatim



@section fist_program_explanation Explanation of the first program

The header @code #include <core/PointCloud3D.h> @endcode includes the point cloud representation used within BRICS_3D. 
Then an empty point cloud is created by issuing @code BRICS_3D::PointCloud3D* myPointCloud = new BRICS_3D::PointCloud3D(); @endcode
This is cloud is then filled with four Cartesian points:

@code
	myPointCloud->addPoint(BRICS_3D::Point3D(0,0,0));
	myPointCloud->addPoint(BRICS_3D::Point3D(1,0,0));
	myPointCloud->addPoint(BRICS_3D::Point3D(0,1,0));
	myPointCloud->addPoint(BRICS_3D::Point3D(0,0,1));
@endcode

The point cloud can be then easily print out via streaming to cout:

@code
	std::cout << *myPointCloud; 		
@endcode

Further examples and explanations can be found on the @ref examples page.

@section advanced_compiling Compiling advanced projects

While the hello world example gives a quick entry into getting the first programm running, 
one should be aware of the fact that BRICS_3D is partitioned into a chunk of smaller libraries. 
Each of those libraries might have further dependencies e.g. the visualization class uses OpenSceneGraph (OSG) which in case you want to use the visualization you need to link to your application too.

BRICS_3D consists of the following (sub)libraries:
- \e brics3d_core The core library that has all the relevant data-types like BRICS_3D::PointCloud3D and all common code like the BRICS_3D::Logger for instance.
- \e brics3d_algorithm The library that contains 3D perception and modling algorithms as discussed in section in @ref introduction.
- \e brics3d_util Utility library with e.g. @ref visualization and benchmarking facilities. 
- \e brics3d_world_model The 3D world model implementation. 
           
The depenency of these libraries are expressed in the following graph diagram. The red nodes reprent the BRICS_3D libraries, while the black nodes indicate the external dependencies. 
Blue nodes illustrate optional libraries with their dependencies indicated by the dotted lines. In short terms all BRICS_3D libraries depend on \e brics3d_core while further 
other external dependencies might be involved. 
 
@dot 
digraph {
c [label = core color=red];
u [label = util color=red];
a [label = algorithm color=red];
w [label = world_model color=red];
e [label = Eigen];
b [label = Boost];
cv [label = OpenCV]
o [label = OSG  color=blue]
p [label = PCL color=blue]
x [label = Xerces color=blue]
cg [label = CGAL color=blue]
//required dependencies
c->e;
c->b;
a->c;
a->cv;
u->c;
u->x

//optional dependencies
w->o[style=dotted];
u->o[style=dotted];
u->p[style=dotted];
a->p[style=dotted];
w->c[style=dotted];
a->cg[style=dotted];
//w->u[style=dotted];
}
@enddot

This structure has inplications on the corretly added and ordered libraries to be linked to the application. 
While liking BRICS_3D to an application \e brics_3d_core needs to be linked first (which means it will be supplied
to the gcc linker last!). However the \e FindBRICS_3D.cmake script provides the variable 
\e ${BRICS_3D_LIBRARIES} containing all BRICS_3D libraries in the correct order.

For a new project that makes use of BRICS_3D it is recommended to follws thees steps:

- Create a new folder and copy over the external/cmake_modules from BRICS_3D. It contains all relevant CMake scripts to resolve the
  BRICS_3D and its dependencies.
  
- Create an approriate top level CMake file as shown below that searches for dependencies and adds them to the include and linker paths.

- Create an executable and link the needed dependencies.

@code
CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(BRICS_3D_example_application)

SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/external/cmake_modules")

FIND_PACKAGE(BRICS_3D REQUIRED)
FIND_PACKAGE(Eigen REQUIRED)
FIND_PACKAGE(Boost COMPONENTS thread)
FIND_PACKAGE(OpenCV REQUIRED)
FIND_PACKAGE(OpenSceneGraph COMPONENTS osgGA osgUtil osgViewer) #optional but recommented
FIND_PACKAGE(Xerces) # optional
ADD_DEFINITIONS(-DEIGEN3) # Here we use Eigen3 instead of Eigen2 (recommended)

# add include directories (-I)
INCLUDE_DIRECTORIES(
	${BRICS_3D_INCLUDE_DIRS}
	${EIGEN_INCLUDE_DIRS}
	${Boost_INCLUDE_DIR}
	${OPENCV_INCLUDE_DIR}
	${OPENSCENEGRAPH_INCLUDE_DIRS}
)

# add library directories (-L)
LINK_DIRECTORIES(
	${BRICS_3D_LINK_DIRECTORIES}
	${OpenCV_LINK_DIRECTORIES}
)

# compile and link the executables 
ADD_EXECUTABLE(example_application example_application.cpp)

TARGET_LINK_LIBRARIES(example_application
	${BRICS_3D_LIBRARIES}
	${XERCES_LIBRARIES}
	${OSG_LIBRARY_DEBUG}
	${OSGGA_LIBRARY_DEBUG}
	${OSGVIEWER_LIBRARY_DEBUG}
	${OpenCV_LIBRARIES}
	${Boost_LIBRARIES}
)
@endcode      


@section linker_troubleshooting Troubleshooting linker problems

- The BRICS_3D library cannot be found: In case it is not installed to the systems default folders set the following 
  environment varibale:
  @code export BRICS_3D_DIR=<path_to_brics_3d> @endcode

- The \e ${BRICS_3D_LIBRARIES} variable remains empty. Clear the CMake cache and retry.  
*/